import { Injectable } from '@angular/core';
import { Lesson } from '../interfaces/Lesson.interface';

@Injectable({
  providedIn: 'root',
})
export class LessonService {
  private lessons: Lesson[] = [
    {
      num: 1,
      title: 'ReactiveForm',
      slug: 'reactive-form',
      description:
        'ReactiveForm dans Angular est un moyen d√©claratif de cr√©er des formulaires, en utilisant des objets mod√®les pour g√©rer la logique de validation et de soumission des donn√©es.',
      status: '‚úÖ',
    },
    {
      num: 2,
      title: 'Formulaire r√©actif',
      slug: 'formulaire-reactif',
      description:
        'Un formulaire r√©actif dans Angular permet de cr√©er des formulaires de mani√®re programmatique, avec une gestion r√©active des donn√©es et des validations.',
      status: '‚ùå',
    },
    {
      num: 3,
      title: 'Value et Reset',
      slug: 'value-and-reset',
      description:
        "La propri√©t√© value d'un FormGroup permet d'acc√©der ou de d√©finir les valeurs des contr√¥les, tandis que reset() r√©initialise ces valeurs aux valeurs initiales.",
      status: '‚úíÔ∏è',
    },
    {
      num: 4,
      title: 'Les validateurs',
      slug: 'validateurs',
      description:
        "Les validateurs dans les formulaires r√©actifs d'Angular servent √† d√©finir des r√®gles de validation pour les champs du formulaire, synchrones ou asynchrones..",
      status: 'üöß',
    },
    {
      num: 5,
      title: "Les messages d'erreurs",
      slug: 'messages-erreurs',
      description:
        "Les messages d'erreurs dans les formulaires r√©actifs d'Angular permettent d'afficher des messages explicatifs lorsqu'un champ ne passe pas une validation donn√©e.",
      status: 'üöß',
    },
    {
      num: 6,
      title: 'Les classes et √©tats des abstractControls',
      slug: 'classes-etats-abstractcontrols',
      description:
        "Les classes et √©tats des AbstractControls dans les formulaires r√©actifs d'Angular (valid, invalid, dirty, pristine, etc.) refl√®tent l'√©tat de validation et d'int√©raction des contr√¥les.",
      status: 'üöß',
    },
    {
      num: 7,
      title: 'Les formGroups imbriqu√©',
      slug: 'formgroups-imbrique',
      description:
        "Les FormGroups imbriqu√©s dans les formulaires r√©actifs d'Angular permettent de mod√©liser des structures de donn√©es imbriqu√©es et complexes de mani√®re organis√©e.",
      status: 'üöß',
    },
    {
      num: 8,
      title: 'FormArray',
      slug: 'formarray',
      description:
        "Le FormArray dans les formulaires r√©actifs d'Angular permet de g√©rer des groupes de FormControls dynamiques comme des tableaux de champs.",
      status: 'üöß',
    },
    {
      num: 9,
      title: 'FormBuilder',
      slug: 'formbuilder',
      description:
        "Le FormBuilder dans les formulaires r√©actifs d'Angular facilite la cr√©ation de groupe de contr√¥les et de formulaires en fournissant une syntaxe plus concise.",
      status: 'üöß',
    },
    {
      num: 10,
      title: 'FormGroup et EventEmitter',
      slug: 'formgroup-eventemitter',
      description:
        "Dans les formulaires r√©actifs d'Angular, un FormGroup peut √©mettre des √©v√©nements via EventEmitter pour notifier les changements de valeur ou d'√©tat.",
      status: 'üöß',
    },
    {
      num: 11,
      title: 'Case √† cocher, boutons radio et listes d√©roulantes',
      slug: 'checkbox-radio-select',
      description:
        "Dans les formulaires r√©actifs d'Angular, les cases √† cocher, boutons radio et listes d√©roulantes sont g√©r√©s respectivement par FormControl, FormArray et FormGroup.",
      status: 'üöß',
    },
  ];

  constructor() {}

  public getLessons() {
    return this.lessons;
  }
}
